package com.javarush.telegram;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;
import java.util.List;

public class TinderBoltApp extends MultiSessionTelegramBot {
    public static final String TELEGRAM_BOT_NAME = "my_tbh_tinder_bot"; //TODO: –¥–æ–¥–∞–π —ñ–º'—è –±–æ—Ç–∞ –≤ –ª–∞–ø–∫–∞—Ö
    public static final String TELEGRAM_BOT_TOKEN = "7366650902:AAFQCZ9-3hfvBGS0p3hylXC0ZFhJTIwpVM4"; //TODO: –¥–æ–¥–∞–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ª–∞–ø–∫–∞—Ö
    public static final String OPEN_AI_TOKEN = "gpt:write_your_secret_token";
    public DialogMode mode = DialogMode.MAIN;
    public ChatGPTService gptService = new ChatGPTService(OPEN_AI_TOKEN);
    private List<String> chat;
    private UserInfo myInfo;
    private UserInfo personInfo;
    private int questionNumber;

    public TinderBoltApp() {
        super(TELEGRAM_BOT_NAME, TELEGRAM_BOT_TOKEN);
    }

    @Override
    public void onUpdateEventReceived(Update update) {
        String message = getMessageText();
        switch (message) {
            case "/start" -> {
                mode = DialogMode.MAIN;
                showMainMenu(
                        "–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞", "/start",
                        "–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è Tinder-–ø—Ä–æ—Ñ—ñ–ª—é \uD83D\uDE0E", "/profile",
                        "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ \uD83E\uDD70", "/opener",
                        "–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ \uD83D\uDE08", "/message",
                        "–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–∫–∞–º–∏ \uD83D\uDD25", "/date",
                        "–ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT \uD83E\uDDE0", "/gpt"
                );
                sendPhotoMessage("main");
                String menu = loadMessage("main");
                sendTextMessage(menu);
                return;
            }
            case "/gpt" -> {
                mode = DialogMode.GPT;
                sendPhotoMessage("gpt");
                String gptMessage = loadMessage("gpt");
                sendTextMessage(gptMessage);
                return;
            }
            case "/date" -> {
                mode = DialogMode.DATE;
                sendPhotoMessage("date");
                String dateMessage = loadMessage("date");
                sendTextButtonsMessage(dateMessage,
                        "–ê—Ä—ñ–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ üî•", "date_grande",
                        "–ú–∞—Ä–≥–æ –†–æ–±–±—ñ üî•üî•", "date_robbie",
                        "–ó–µ–Ω–¥–µ—è üî•üî•üî•", "date_zendaya",
                        "–†–∞–π–∞–Ω –ì–æ—Å–ª—ñ–Ω–≥ üòé", "date_gosling",
                        "–¢–æ–º –•–∞—Ä–¥—ñ üòéüòé", "date_hardy");
                return;
            }
            case "/message" -> {
                mode = DialogMode.MESSAGE;
                sendPhotoMessage("message");
                String gptMessageHelper = loadMessage("message");
                sendTextButtonsMessage(gptMessageHelper,
                        "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "message_next",
                        "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è", "message_date");
                chat = new ArrayList<>();
                return;
            }
            case "/profile" -> {
                mode = DialogMode.PROFILE;
                sendPhotoMessage("profile");
                String profileMessage = loadMessage("profile");
                sendTextMessage(profileMessage);
                myInfo = new UserInfo();
                questionNumber = 1;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:");
                return;
            }
            case "/opener" -> {
                mode = DialogMode.OPENER;
                sendPhotoMessage("opener");
                String profileMessage = loadMessage("opener");
                sendTextMessage(profileMessage);
                personInfo = new UserInfo();
                questionNumber = 1;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:");
                return;
            }
        }


        switch (mode) {
            case GPT -> {
                String prompt = loadPrompt("gpt");
                Message msg = sendTextMessage("–ø–æ—á–µ–∫–∞–π...");
                String answer = gptService.sendMessage(prompt, message);
                updateTextMessage(msg, answer);
            }
            case DATE -> {
                String query = getCallbackQueryButtonKey();
                if (query.startsWith("date_")) {
                    sendPhotoMessage(query);
                    String prompt = loadPrompt(query);
                    gptService.setPrompt(prompt);
                    return;
                }
                Message msg = sendTextMessage("–ø–æ—á–µ–∫–∞–π...");
                String answer = gptService.addMessage(message);
                updateTextMessage(msg, answer);
            }
            case MESSAGE -> {
                String query = getCallbackQueryButtonKey();
                if (query.startsWith("message_")) {
                    String prompt = loadPrompt(query);
                    String history = String.join("/n/n", chat);
                    Message msg = sendTextMessage("–ø–æ—á–µ–∫–∞–π...");
                    String answer = gptService.sendMessage(prompt, history);
                    updateTextMessage(msg, answer);
                }
                chat.add(message);
            }
            case PROFILE -> {
                if (questionNumber <= 6) {
                    askQuestion(message, myInfo, "profile");
                }
            }
            case OPENER -> {
                if (questionNumber <= 6) {
                    askQuestion(message, personInfo, "opener");
                }
            }
        }
    }


    private void askQuestion(String message, UserInfo user, String profileName) {
        switch (questionNumber) {
            case 1 -> {
                user.name = message;
                questionNumber = 2;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫:");
                return;
            }
            case 2 -> {
                user.age = message;
                questionNumber = 3;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:");
                return;
            }
            case 3 -> {
                user.city = message;
                questionNumber = 4;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ—é:");
                return;
            }
            case 4 -> {
                user.occupation = message;
                questionNumber = 5;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —Ö–æ–±–±—ñ:");
                return;
            }
            case 5 -> {
                user.hobby = message;
                questionNumber = 6;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?");
                return;
            }
            case 6 -> {
                user.goals = message;
                String prompt = loadPrompt(profileName);
                Message msg = sendTextMessage("–ø–æ—á–µ–∫–∞–π.—á–∞—Ç –¥—É–º–∞—î...");
                String answer = gptService.sendMessage(prompt, user.toString());
                updateTextMessage(msg, answer);
                return;
            }
        }
    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
        telegramBotsApi.registerBot(new TinderBoltApp());
    }
}
